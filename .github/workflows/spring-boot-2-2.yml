# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle spring-boot-2-2

on:
  push:
    branches: [ "spring-boot-2" ]
  pull_request:
    branches: [ "spring-boot-2" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.0.0
      with:
        name: build
        path: build/libs/spring-music-1.0.jar
    - name: Upload a Dockerfile
      uses: actions/upload-artifact@v4.0.0
      with:
        name: dockerfile
        path: Dockerfile
    - name: Upload a Manifest
      uses: actions/upload-artifact@v4.0.0
      with:
        name: manifest
        path: manifest
  download:
    needs: build
    runs-on: [self-hosted, linux, x64]
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./
  imagebuild:
    needs: download
    runs-on: [self-hosted, linux, x64]
    steps:
    - run: cp build/spring-music-1.0.jar dockerfile
    - run: source env.yaml; podman build -t $IMAGE_PATH dockerfile ; podman push $IMAGE_PATH
  deploy:
    needs: imagebuild
    runs-on: [self-hosted, linux, x64]
    steps:
    - run: source env.yaml; IMAGE_PATH="${IMAGE_PATH}" yq e '.spec.template.spec.containers[0].image = env(IMAGE_PATH)' manifest/deployment.yaml | kubectl apply -f -; kubectl apply -f manifest/service.yaml; INGRESS_HOST="${INGRESS_HOST}" yq e '.spec.rules[0].host = env(INGRESS_HOST)' manifest/ingress.yaml | kubectl apply -f -; kubectl rollout restart deployment/spring-music


